/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {

HashMap<Integer,Integer>map=new HashMap<>();
        for(int i=0;i<inorder.length;i++)
            map.put(inorder[i],i);
       
        return f(preorder,0,preorder.length-1,inorder,0,inorder.length-1,map);
    }
    public TreeNode f(int preorder[], int preS, int preE, int[] inorder, int inS, int inE,HashMap<Integer,Integer>map){
          if(preS > preE || inS > inE )
            return null;
 int rootValue=preorder[preS];
//  while(inorder[i] !=rootValue)
//         i++;

       TreeNode root=new TreeNode(rootValue);
        int i= map.get(root.val);
       root.left=f(preorder, preS+1,preS+1 + i-inS-1, inorder, inS, i-1,map );
       root.right= f(preorder,preS+1+i-inS,preE,inorder, i+1, inE,map);
       return root;

    }
}

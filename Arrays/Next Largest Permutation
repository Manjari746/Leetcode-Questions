class Solution {
    public void nextPermutation(int[] nums) {
        
        int n = nums.length;
        int j= n-1;
        int i = n-2;
        // finding discontinuity break
        while(i>=0 && nums[i]>=nums[j]){
            j--;
            i--;
        }
      
        // if it is completely decreasing
        if(i<0){
            reverse( nums ,0 , n-1);
            return ;
        }
        // finding just largest element (index) from arr[i] element  and search from last from array
        int k = n-1;
        while(nums[k]<= nums[i])
            k--;

            //swap just larger element from arr[i] present at kth pos with arr[i]
            swap(nums, k, i);

            // reverse the elements from last index till j (i.e. i+1 index)
            reverse(nums, j, n-1);

    }

    public void swap( int[]arr, int i , int j ){
            int temp =arr[i];
            arr[i]=arr[j];
            arr[j]= temp;
           
        }

        public void reverse(int[]arr, int i , int j){
            while(i<j){
                swap(arr,i++, j--);
            }
        }
    }
